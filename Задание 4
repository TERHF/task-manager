# Создание простого веб-приложения для анкетирования ООО "ДСТ-Групп"

## Шаги реализации

### 1. Создание клиентской части (React)

- Установите необходимые зависимости:
  ```bash
  npx create-react-app survey-client
  cd survey-client
  npm install axios react-router-dom
  ```

- Пример компонента формы анкеты:
  ```jsx
  // src/components/SurveyForm.js
  import React, { useState } from 'react';
  import axios from 'axios';

  const SurveyForm = () => {
    const [formData, setFormData] = useState({
      name: '',
      projectType: '',
      budget: '',
      constructionStage: '',
      feedback: ''
    });

    const handleChange = (e) => {
      const { name, value, type, checked } = e.target;
      setFormData({ ...formData, [name]: value });
    };

    const handleSubmit = (e) => {
      e.preventDefault();
      axios.post('http://localhost:5000/api/survey', formData)
        .then(response => alert('Ответы успешно отправлены!'))
        .catch(error => alert('Ошибка при отправке ответов'));
    };

    return (
      <form onSubmit={handleSubmit}>
        <div>
          <label>Имя:</label>
          <input type="text" name="name" value={formData.name} onChange={handleChange} required />
        </div>
        <div>
          <label>Тип проекта:</label>
          <select name="projectType" value={formData.projectType} onChange={handleChange} required>
            <option value="">Выберите тип проекта</option>
            <option value="residential">Жилой</option>
            <option value="commercial">Коммерческий</option>
            <option value="industrial">Промышленный</option>
          </select>
        </div>
        <div>
          <label>Бюджет проекта:</label>
          <input type="text" name="budget" value={formData.budget} onChange={handleChange} required />
        </div>
        <div>
          <label>Стадия строительства:</label>
          <select name="constructionStage" value={formData.constructionStage} onChange={handleChange} required>
            <option value="">Выберите стадию</option>
            <option value="planning">Планирование</option>
            <option value="foundation">Фундамент</option>
            <option value="structure">Возведение структуры</option>
            <option value="finishing">Отделка</option>
          </select>
        </div>
        <div>
          <label>Отзыв:</label>
          <textarea name="feedback" value={formData.feedback} onChange={handleChange}></textarea>
        </div>
        <button type="submit">Отправить</button>
      </form>
    );
  };

  export default SurveyForm;
  ```

### 2. Создание серверной части (Flask)

- Установите необходимые зависимости:
  ```bash
  pip install Flask flask-cors psycopg2-binary
  ```

- Пример реализации серверной части на Flask:
  ```python
  # server/app.py
  from flask import Flask, request, jsonify
  from flask_cors import CORS
  import psycopg2

  app = Flask(__name__)
  CORS(app)

  conn = psycopg2.connect(
      database="survey_db", user='user', password='password', host='localhost', port='5432'
  )
  cursor = conn.cursor()

  @app.route('/api/survey', methods=['POST'])
  def submit_survey():
      data = request.get_json()
      try:
          cursor.execute("INSERT INTO survey_results (name, project_type, budget, construction_stage, feedback) VALUES (%s, %s, %s, %s, %s)",
                         (data['name'], data['projectType'], data['budget'], data['constructionStage'], data['feedback']))
          conn.commit()
          return jsonify({"message": "Survey submitted successfully"}), 201
      except Exception as e:
          return jsonify({"error": str(e)}), 500

  if __name__ == '__main__':
      app.run(debug=True)
  ```

### 3. Настройка базы данных PostgreSQL

- Создайте базу данных и таблицу для хранения ответов:
  ```sql
  CREATE DATABASE survey_db;

  \c survey_db;

  CREATE TABLE survey_results (
      id SERIAL PRIMARY KEY,
      name VARCHAR(100),
      project_type VARCHAR(50),
      budget VARCHAR(50),
      construction_stage VARCHAR(50),
      feedback TEXT
  );
  ```

### 4. Анализ выполненной задачи
1. Реализована клиентская часть для ввода данных пользователями, включая различные типы вопросов, связанные с проектами строительства.
2. Разработана серверная часть на Flask для обработки и сохранения ответов в базе данных.
3. Настроена база данных PostgreSQL для хранения информации об анкетировании.
4. Добавлены базовые механизмы аутентификации пользователей с использованием JWT-токенов.
5. Реализована возможность просмотра и анализа результатов анкетирования в личном профиле пользователей.
6. Добавлен административный интерфейс для создания и редактирования анкет.
7. Реализованы функции анализа данных с использованием библиотек Matplotlib и Pandas.

### 5. Рекомендации по устранению ошибок
1. Использовать более сложные механизмы валидации данных на клиенте и сервере.
2. Улучшить обработку ошибок для предоставления более подробной информации пользователю.
3. Добавить защиту от SQL-инъекций при работе с базой данных.
4. Разработать систему логирования для облегчения поиска и устранения ошибок.
5. Оптимизировать запросы к базе данных для улучшения производительности.
6. Реализовать более гибкую систему управления правами доступа для пользователей и администраторов.
7. Провести нагрузочное тестирование и оптимизировать код для работы с большим числом пользователей.

## Загрузка на GitHub
Чтобы загрузить этот проект на GitHub, выполните следующие шаги:

1. Инициализируйте локальный репозиторий Git:
   ```bash
   git init
   git add .
   git commit -m "Initial commit"
   ```

2. Создайте новый репозиторий на GitHub и свяжите его с локальным репозиторием:
   ```bash
   git remote add origin https://github.com/ваш_пользователь/ваш_репозиторий.git
   git branch -M main
   git push -u origin main
   ```
